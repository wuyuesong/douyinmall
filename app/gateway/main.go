// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by hertz generator.

package main

import (
	"context"
	"os"
	"strings"
	"time"
	"github.com/wuyuesong/douyinmall/app/gateway/biz/dal"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/redis"
	"github.com/joho/godotenv"
	"github.com/wuyuesong/douyinmall/app/gateway/biz/handler/product"
	"github.com/wuyuesong/douyinmall/app/gateway/biz/router"
	"github.com/wuyuesong/douyinmall/app/gateway/conf"
	"github.com/wuyuesong/douyinmall/app/gateway/infra/rpc"
	"github.com/wuyuesong/douyinmall/app/gateway/middleware"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
	"github.com/hertz-contrib/casbin" // 重命名导入避免混淆
	gateutil	"github.com/wuyuesong/douyinmall/app/gateway/biz/utils"
	
)

func JwtWithWhitelist(whitelist []string) app.HandlerFunc {
	return func(ctx context.Context, c *app.RequestContext) {
		method := string(c.Method())
		currentPath := string(c.Path())
		if (strings.HasPrefix(currentPath, "/image/") ||
			strings.HasPrefix(currentPath, "/product/")) &&
			method == "GET" { // 新增方法判断
			c.Next(ctx)
			return
		}

		for _, path := range whitelist {
			if currentPath == path {
				hlog.Info("跳过 JWT 校验:", currentPath)
				c.Next(ctx)
				return
			}
		}
		middleware.JwtMiddleware.MiddlewareFunc()(ctx, c)
	}
}

var whitelist = []string{
	"/",
	"/ping",
	"/home",
	"/auth/login",
	"/auth/sign-up",
	"/admin/home",
	"/auth/register",
	"/upload-images",
}

func main() {
	_ = godotenv.Load()
	// init dal
	dal.Init()
	rpc.Init()
	middleware.InitJwt(os.Getenv("SESSION_SECRET"))
	middleware.InitCasbin()
	address := conf.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	h.Use(JwtWithWhitelist(whitelist))
	h.POST("/upload-images", product.UploadImages)

	h.GET("/ping", middleware.CasbinHertzMiddleware.RequiresPermissions("ping:GET",casbin.WithLogic(casbin.AND)), func(ctx context.Context, c *app.RequestContext) {
		gateutil.SendSuccessResponse(ctx, c, consts.StatusOK, "pong")
	})
	router.GeneratedRegister(h)
	auth := h.Group("/auth")

	auth.POST("/login", middleware.JwtMiddleware.LoginHandler)
	auth.GET("/refresh_token", middleware.JwtMiddleware.RefreshHandler)
	h.Static("/static", "./")

	h.GET("/about", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "about", utils.H{"title": "About"})
	})

	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		data := utils.H{
			"title": "Sign In",
			"next":  ctx.Query("next"),
		}
		ctx.HTML(consts.StatusOK, "sign-in", data)
	})
	h.GET("/sign-up", func(c context.Context, ctx *app.RequestContext) {
		ctx.HTML(consts.StatusOK, "sign-up", utils.H{"title": "Sign Up"})
	})

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	store, err := redis.NewStore(10, "tcp", conf.GetConf().Redis.Address, "", []byte(os.Getenv("SESSION_SECRET")))
	if err != nil {
		panic(err)
	}
	h.Use(sessions.New("cloudwego-shop", store))

	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	// h.Use(cors.Default())
	h.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"http://localhost:5173"},
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	middleware.Register(h)
}
